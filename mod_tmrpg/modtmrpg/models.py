from django.core.validators import MinValueValidator
from django.db import models
from django.db.models.signals import post_init
from django_random_id_model import RandomIDModel
import random

# Create your models here.

class Pex(models.Model):
    hierarchy = models.IntegerField('–≤—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏', default=1)
    pex_name = models.CharField('pex', max_length=12, unique=True)
    display_name = models.CharField('display_name', max_length=15)
    prefix_color = models.CharField('—Ü–≤–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞', max_length=12)
    nickname_color = models.CharField('—Ü–≤–µ—Ç –Ω–∏–∫–∞',max_length=12)
    OC_nickname_color = models.CharField('–¶–≤–µ—Ç –Ω–∏–∫–∞ –≤ –∫–æ–º–ø–µ', default='#383838',max_length=12)

    class Meta:
        verbose_name = "–î–æ–ª–∂–Ω–æ—Å—Ç—å"
        verbose_name_plural = "–î–æ–ª–∂–Ω–æ—Å—Ç–∏"

    def __str__(self):
        return f'{self.pex_name} | {self.display_name} | {self.prefix_color}'
    
class Moder(RandomIDModel):
    nickname = models.CharField('–Ω–∏–∫–Ω–µ–π–º', unique=True, max_length=32)
    pex = models.ForeignKey("Pex", to_field='pex_name', default='helper1' , on_delete=models.CASCADE)
    balance = models.IntegerField('–±–∞–ª–∞–Ω—Å', default=0)
    discord = models.ForeignKey("Discord", on_delete=models.SET_NULL, blank=True, null=True)
    is_registered = models.BooleanField('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', default=False)
    skin_valid = models.BooleanField('–ü–æ–¥–≥—Ä—É–∑–∏–ª—Å—è –ª–∏ —Å–∫–∏–Ω?', default=False)
    head_valid = models.BooleanField('–ü–æ–¥–≥—Ä—É–∑–∏–ª–∞—Å—å –ª–∏ –≥–æ–ª–æ–≤–∞?', default=False)

    def __str__(self):
        return f'[{self.pex.display_name}] {self.nickname} | id: {self.id}'
    
    class Meta:
        ordering = ['-pex__hierarchy']
        verbose_name = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
        verbose_name_plural = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã"
    
    def is_st(self):
        return self.pex.pex_name == "StModer" or self.pex.pex_name == "gm" or self.pex.pex_name == "gd" or self.pex.pex_name == "techadmin"
    def is_admin(self):
        return self.pex.pex_name == 'curator' or self.pex.pex_name == "admin"
    
    def get_all_reprimands(self):
        return Reprimand.objects.filter(moder=self)


class EcoLog(models.Model):
    admin = models.ForeignKey("Moder", null=True, blank=True, on_delete=models.CASCADE, related_name='admin')   
    moder = models.ForeignKey("Moder", null=True, on_delete=models.CASCADE, related_name='moder')   
    amount = models.IntegerField('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    reason = models.TextField('–ü—Ä–∏—á–∏–Ω–∞')
    date = models.DateTimeField(auto_now_add=True)
    def getDate(self):
        return self.date.strftime("%d %b %Y")
    def __str__(self):
        t = f'+{self.amount}' if self.amount>0 else self.amount
        if self.admin:
            return f'[{self.admin.pex.display_name}] {self.admin.nickname} --> {t} --> [{self.moder.pex.display_name}] {self.moder.nickname}'
        return f'[Shop --> {t} --> [{self.moder.pex.display_name}] {self.moder.nickname}'
    class Meta:
        ordering = ['-date']
        verbose_name = "–õ–æ–≥ —ç–∫–æ–Ω–æ–º–∏–∫–∏"
        verbose_name_plural = "–õ–æ–≥–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏"


class Reprimand(models.Model):
    admin = models.ForeignKey("Moder", null=True, on_delete=models.CASCADE, related_name='modtmrpg.Reprimand.admin+')   
    moder = models.ForeignKey("Moder", null=True, on_delete=models.CASCADE, related_name='modtmrpg.Reprimand.moder+')
    reason = models.TextField('–ü—Ä–∏—á–∏–Ω–∞')
    date = models.DateTimeField(auto_now_add=True)
    def getDate(self):
        return self.date.strftime("%d %b %Y")
    def __str__(self):
        return f'[{self.admin.pex.display_name}] {self.admin.nickname} --> [{self.moder.pex.display_name}] {self.moder.nickname}'
    class Meta:
        ordering = ['-date']
        verbose_name = "–í—ã–≥–æ–≤–æ—Ä"
        verbose_name_plural = "–í—ã–≥–æ–≤–æ—Ä—ã"


class Discord(models.Model):
    ds_id = models.IntegerField()
    username = models.CharField(max_length=32)
    avatar = models.TextField('–∞–≤–∞—Ç–∞—Ä–∫–∞', blank=True, default='')
    global_name = models.CharField(max_length=32)

    def __str__(self):
        return self.global_name
    
    class Meta:
        verbose_name = "–î–∏—Å–∫–æ—Ä–¥"
        verbose_name_plural = "–î–∏—Å–∫–æ—Ä–¥—ã"
    

class RegisterFormModel(models.Model):
    secret_code = models.IntegerField()
    password1 = models.CharField('–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å',max_length=16)
    password2 = models.CharField('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å',max_length=16)

    def __str__(self):
        return self.secret_code
    class Meta:
        verbose_name = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü—Ü–∏–æ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞"
        verbose_name_plural = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã"
    
class Item(models.Model):
    item_name = models.CharField('–Ω–∞–∑–≤–∞–Ω–∏–µ',max_length=31)
    description = models.CharField('–æ–ø–∏—Å–∞–Ω–∏–µ', blank=True, max_length=30)
    note = models.CharField('–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ', blank=True, max_length=35)
    price = models.IntegerField('—Ü–µ–Ω–∞', validators=[MinValueValidator(1)])
    # image = models.CharField(max_length=100)
    image = models.ImageField('–∫–∞—Ä—Ç–∏–Ω–∫–∞',upload_to ='items/', blank=True,  null=True)
    image_url = models.TextField('–ü—É—Ç—å –ª–∏–±–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É (–Ω–µ —Ç—Ä–æ–≥–∞–π, –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫–æ–π)',blank=True, null=True)
    type = models.IntegerField('–ù–ï –¢–†–û–ì–ê–¢–¨(type)', default=0)
    is_auto = models.IntegerField('–ù–ï –¢–†–û–ì–ê–¢–¨(auto)', default=0)
    # 0 - items
    # 1 - cases
    # 2 - privki
    
    def __str__(self):
        return f'{self.item_name} | —Ü–µ–Ω–∞: {self.price}üíµ'
    class Meta:
        ordering = ['-type', '-price']
        verbose_name = "–ü—Ä–µ–¥–º–µ—Ç"
        verbose_name_plural = "–ü—Ä–µ–¥–º–µ—Ç—ã"
    
class MediaCategory(models.Model):
    category_name = models.CharField('–Ω–∞–∑–≤–∞–Ω–∏–µ',max_length=12)
    category_folder = models.CharField('–ø—É—Ç—å',max_length=12)
    def __str__(self):
        return f'{self.category_name} | {self.category_folder}'
    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–¥–∏–∞"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–¥–∏–∞"
    
class MediaItem(models.Model):
    media_name = models.CharField('–Ω–∞–∑–≤–∞–Ω–∏–µ', max_length=30)
    media_file = models.ImageField(upload_to ='items/')
    category = models.ForeignKey("MediaCategory", on_delete=models.SET_NULL, blank=True, null=True)
    def __str__(self):
        return f'{self.media_name} | {self.id}'
    class Meta:
        verbose_name = "–ü—Ä–µ–¥–º–µ—Ç –º–µ–¥–∏–∞"
        verbose_name_plural = "–ü—Ä–µ–¥–º–µ—Ç—ã –º–µ–¥–∏–∞"

class Config(models.Model):
    config_name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ',max_length=31)
    config = models.TextField('–ö–æ–Ω—Ñ–∏–≥', blank=True)
    description = models.TextField('–ó–∞–º–µ—Ç–∫–∏/–æ–ø–∏—Å–∞–Ω–∏–µ', blank=True)
    
    def __str__(self):
        return f'{self.config_name}'
    class Meta:
        verbose_name = "–ö–æ–Ω—Ñ–∏–≥"
        verbose_name_plural = "–ö–æ–Ω—Ñ–∏–≥–∏"


class EnigmaConfig(models.Model):
    config_name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=31)
    config = models.TextField('–ö–æ–Ω—Ñ–∏–≥', blank=True)
    description = models.TextField('–ó–∞–º–µ—Ç–∫–∏/–æ–ø–∏—Å–∞–Ω–∏–µ', blank=True)

    def __str__(self):
        return f'{self.config_name}'

    class Meta:
        verbose_name = "–ö–æ–Ω—Ñ–∏–≥ EnigmaRPG"
        verbose_name_plural = "–ö–æ–Ω—Ñ–∏–≥–∏ EnigmaRPG"


class BonusRequest(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=30)
    moder = models.ForeignKey("Moder", null=True, on_delete=models.CASCADE, related_name='bonus_moder')
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")

    request_amount = models.IntegerField(validators=[MinValueValidator(1)])
    final_amount = models.IntegerField(validators=[MinValueValidator(1)], blank=True, null=True)

    who_accepted = models.ForeignKey("Moder", null=True, blank=True, on_delete=models.CASCADE, related_name='bonus_admin')
    is_canceled = models.BooleanField('–û—Ç–∫–ª–æ–Ω–µ–Ω', default=False, blank=True, null=True)

    date = models.DateTimeField(auto_now_add=True)
    def is_accepted(self):
        return self.who_accepted is not None

    def getDate(self):
        return self.date.strftime("%d %b %Y")\

    def __str__(self):
        return f'id:{self.id} | {self.moder.nickname} | {self.title} | {self.request_amount} | {self.is_accepted()}'

    class Meta:
        ordering = ['date']
        verbose_name = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–¥–±–∞–≤–∫—É"
        verbose_name_plural = "–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–∞–¥–±–∞–≤–∫—É"